/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 src/assets/testing.glb 
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import {RigidBody,CapsuleCollider} from '@react-three/rapier'
import { useFrame } from '@react-three/fiber'
import { useKeyboardControls } from '@react-three/drei'
import * as THREE from 'three'
//1 and 5
export default function Testing() {
  const rbr = useRef()
  const group =useRef()
  const speed=50
  const jump=1000
  const impulse={x:0,y:0,z:0};
  const { nodes, materials, animations } = useGLTF('src/assets/testing.glb')
  const { actions,names } = useAnimations(animations, group)
  const [getKeys,subscribeKeys]=useKeyboardControls()
  const forwardPressed=useKeyboardControls((state)=>state['forward'])
  const leftwardPressed=useKeyboardControls((state)=>state['leftward'])
  const backwardPressed=useKeyboardControls((state)=>state['backward'])
  const rightwardPressed=useKeyboardControls((state)=>state['rightward'])
  const jumpPressed=useKeyboardControls((state)=>state['jump'])

  useFrame((state,delta)=>{
    const bodyPosition=rbr.current?.translation()
    if(forwardPressed){
      actions[names[1]].play()
      impulse.z+=speed
      
    }
    if(backwardPressed){
      actions[names[1]].play()
      impulse.z-=speed
      
    }
    if(leftwardPressed){
      actions[names[1]].play()
      impulse.x+=speed
      
    }
    if(rightwardPressed){
      actions[names[1]].play()
      impulse.x-=speed
      
    }
    rbr.current?.applyImpulse(impulse)
    // camera 3pv controls
    const cameraPosition=new THREE.Vector3()
    cameraPosition.copy(bodyPosition)
    cameraPosition.z-=45
    cameraPosition.y+=35

    const cameraTarget=new THREE.Vector3()
    cameraTarget.copy(bodyPosition)
    cameraTarget.z+=-5
    cameraTarget.y+=35

    state.camera.position.copy(cameraPosition)
    state.camera.lookAt(cameraTarget)


  })

  useEffect(()=>{
   subscribeKeys(
   (state)=>state.jump,
   (value)=>{
    if(value)
    rbr.current?.applyImpulse({x:0,y:500,z:0})
   }
   )
  },[])
  
 
  return (
    <group>
    <RigidBody type='dynamic' ref={rbr} enabledRotations={[false,false,false]} >
        <CapsuleCollider args={[4,4]} position={[0,25,0]} friction={12}>
        <group  ref={group}  dispose={null} castShadow>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI/2, 0, 0]} scale={0.07} position-y={-8}>
          <primitive object={nodes.mixamorigHips} />
          <group name="Soldier">
            <skinnedMesh name="Cube002" geometry={nodes.Cube002.geometry} material={materials['skin.002']} skeleton={nodes.Cube002.skeleton} />
            <skinnedMesh name="Cube002_1" geometry={nodes.Cube002_1.geometry} material={materials['Jacket.002']} skeleton={nodes.Cube002_1.skeleton} />
            <skinnedMesh name="Cube002_2" geometry={nodes.Cube002_2.geometry} material={materials['Pants.002']} skeleton={nodes.Cube002_2.skeleton} />
            <skinnedMesh name="Cube002_3" geometry={nodes.Cube002_3.geometry} material={materials['shoe_shade1.002']} skeleton={nodes.Cube002_3.skeleton} />
            <skinnedMesh name="Cube002_4" geometry={nodes.Cube002_4.geometry} material={materials['shoe_shade2.002']} skeleton={nodes.Cube002_4.skeleton} />
            <skinnedMesh name="Cube002_5" geometry={nodes.Cube002_5.geometry} material={materials['laces.002']} skeleton={nodes.Cube002_5.skeleton} />
            <skinnedMesh name="Cube002_6" geometry={nodes.Cube002_6.geometry} material={materials['Shirt.002']} skeleton={nodes.Cube002_6.skeleton} />
            <skinnedMesh name="Cube002_7" geometry={nodes.Cube002_7.geometry} material={materials['Belt.002']} skeleton={nodes.Cube002_7.skeleton} />
            <skinnedMesh name="Cube002_8" geometry={nodes.Cube002_8.geometry} material={materials['Buttons.002']} skeleton={nodes.Cube002_8.skeleton} />
            <skinnedMesh name="Cube002_9" geometry={nodes.Cube002_9.geometry} material={materials['Silver.002']} skeleton={nodes.Cube002_9.skeleton} />
            <skinnedMesh name="Cube002_10" geometry={nodes.Cube002_10.geometry} material={materials['Eyes.002']} skeleton={nodes.Cube002_10.skeleton} />
            <skinnedMesh name="Cube002_11" geometry={nodes.Cube002_11.geometry} material={materials['balaclava.002']} skeleton={nodes.Cube002_11.skeleton} />
            <skinnedMesh name="Cube002_12" geometry={nodes.Cube002_12.geometry} material={materials['Hair.002']} skeleton={nodes.Cube002_12.skeleton} />
            <skinnedMesh name="Cube002_13" geometry={nodes.Cube002_13.geometry} material={materials['Vest.002']} skeleton={nodes.Cube002_13.skeleton} />
            <skinnedMesh name="Cube002_14" geometry={nodes.Cube002_14.geometry} material={materials['Vest2.002']} skeleton={nodes.Cube002_14.skeleton} />
          </group>
        </group>
      </group>
    </group>
          </CapsuleCollider>

    </RigidBody>
    </group>
   
  )
}

useGLTF.preload('src/assets/testing.glb')
